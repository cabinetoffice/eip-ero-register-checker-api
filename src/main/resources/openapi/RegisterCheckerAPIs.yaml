openapi: 3.0.0
info:
  title: Register Checker APIs
  version: '1.0'
  description: Requests checks and accepts responses from EMS systems to validate elector details exists within the EMS.
  contact:
    name: Krister Bone
    email: krister.bone@valtech.com
servers:
  - url: 'http://localhost:3000'
#
# --------------------------------------------------------------------------------
#
paths:
  #
  # --------------------------------------------------------------------------------
  # RESTful style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Register Checks
  # --------------------------------------------------------------------------------
  /registerchecks:
    parameters:
      - name: pageSize
        description: The maximum number of Pending Register Checks to return
        schema:
          type: integer
          minimum: 1
          maximum: 200
          default: 100
        example: 100
        in: query
        required: false
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Register Checks
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Get Pending Register Checks
      description: Retrieve list of pending register check requests for the connected EMS system.
      operationId: get-pending-register-checks
      tags:
        - Register Checks
      responses:
        '200':
          $ref: '#/components/responses/PendingRegisterChecks'
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/registerchecks
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

  #
  # Single Register Check
  # --------------------------------------------------------------------------------
  '/registerchecks/{requestid}':
    parameters:
      - name: requestid
        description: A unique identifier for the check against the Electoral Register. A 24 character hex string.
        schema:
          type: string
          pattern: '^[a-fA-F\d]{24}$'
        example: 1f0f76a9a66f438b9bb33070
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Single Register Check
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Update Pending Register Check
      description: The EMS system's response to a single Register Check. Updates a pending Register Check with the outcome of the check.
      operationId: update-pending-register-check
      tags:
        - Update Single Register Check
      requestBody:
        $ref: '#/components/requestBodies/RegisterCheckResultRequest'
      responses:
        '200':
          description: Pending Register Check updated successfully.
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/registerchecks/{requestid}
        requestParameters:
          integration.request.path.requestid: "method.request.path.requestid"
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: POST

#
# --------------------------------------------------------------------------------
#
components:
  #
  # Schema and Enum Definitions
  # --------------------------------------------------------------------------------
  schemas:
    PendingRegisterChecksResponse:
      title: PendingRegisterChecksResponse
      description: Response containing pending Register Checks for the calling ERO's EMS system.
      properties:
        pageSize:
          type: integer
          default: 100
        registerCheckRequests:
          description: The list of Pending Register Checks
          type: array
          items:
            $ref: '#/components/schemas/PendingRegisterCheck'
      required:
        - pageSize
        - registerCheckRequests

    PendingRegisterCheck:
      title: PendingRegisterCheck
      type: object
      description: An object describing a pending request for a check against the Electoral Register
      properties:
        requestid:
          type: string
          pattern: '^[a-fA-F\d]{24}$'
          description: A unique identifier for the check against the Electoral Register. A 24 character hex string.
          example: 1f0f76a9a66f438b9bb33070
        source:
          $ref: '#/components/schemas/SourceSystem'
        gssCode:
          type: string
          pattern: '^[a-zA-Z]\d{8}$'
          description: The Local Authority GSS Code that manages the Electoral Register.
          example: E06000001
        actingStaffId:
          type: string
          description: |-
            Indicates who/what initiated the register check request.
            
            Where EROP creates the request automatically this will be "EROP". Should there be a need to manually force an additional check, this will indicate the id of the ERO user who triggered the request (for auditing purposes).
          example: EROP
        createdAt:
          type: string
          description: The date and time this request to check the Electoral Register was generated
          format: date-time
          example: 2022-09-07 14:14:55
        fn:
          type: string
          description: The applicant's first name
          example: Fred
        mn:
          type: string
          description: The applicant's middle name(s)
          example: Cuthbert
        ln:
          type: string
          description: The applicant's surname
          example: Bloggs
        dob:
          type: string
          description: The applicant's date of birth (ISO-8601 format)
          format: date
          example: 1995-03-02
        regproperty:
          type: string
          example: Aviation House
        regstreet:
          type: string
          example: 125 Kingsway
        reglocality:
          type: string
          example: Camden
        regtown:
          type: string
          example: London
        regarea:
          type: string
          example: Greater London
        regpostcode:
          type: string
          example: SW112DR
        reguprn:
          type: string
          example: 0987654321
        phone:
          type: string
          description: The applicant's phone number for contact purposes.
          example: 01234 567890
        email:
          type: string
          format: email
          description: The applicant's email address for contact purposes.
      required:
        - requestid
        - source
        - gssCode
        - actingStaffId
        - createdAt
        - fn
        - ln
        - regstreet
        - regpostcode

    SourceSystem:
      title: SourceSystem
      description: The source system of the Application
      enum:
        - EROP

    RegisterCheckResult:
      title: RegisterCheckResult
      type: object
      description: The outcome of an ERO's EMS system's Register Check.
      properties:
        requestid:
          type: string
          pattern: '^[a-fA-F\d]{24}$'
          description: A unique identifier for the check against the Electoral Register. A 24 character hex string.
          example: 1f0f76a9a66f438b9bb33070
        gssCode:
          type: string
          pattern: '^[a-zA-Z]\d{8}$'
          description: The Local Authority GSS Code that manages the Electoral Register.
          example: E06000001
        createdAt:
          type: string
          description: The date and time this request to update the Pending Register Check was generated.
          format: date-time
          example: 2022-09-07 14:14:55
        registerCheckMatchCount:
          type: integer
          description: The number of possible matches found in the Electoral Register for the details in the request. If 10 or fewer matches were found, each should be returned in the “registerCheckMatches” array below. If more than 10 matches were found, the “registerCheckMatches” array should be omitted.
          example: 10
        registerCheckMatches:
          type: array
          description: Each record in “registerCheckMatches” represents one potential match within the EMS that could represent the Elector in the Register Check Request
          items:
            $ref: '#/components/schemas/RegisterCheckMatch'

    RegisterCheckMatch:
      title: RegisterCheckMatch
      type: object
      description: Register Check Match response from the EMS system.
      properties:
        emsElectorId:
          type: string
          description: The stable unique id of the elector.
          example: TODO - is this is a UUID?
        fn:
          type: string
          description: The applicant's first name
          example: Fred
        mn:
          type: string
          description: The applicant's middle name(s)
          example: Cuthbert
        ln:
          type: string
          description: The applicant's surname
          example: Bloggs
        dob:
          type: string
          description: The applicant's date of birth (ISO-8601 format)
          format: date
          example: "1995-03-02"
        regproperty:
          type: string
          example: Aviation House
        regstreet:
          type: string
          example: 125 Kingsway
        reglocality:
          type: string
          example: Camden
        regtown:
          type: string
          example: London
        regarea:
          type: string
          example: Greater London
        regpostcode:
          type: string
          example: SW112DR
        reguprn:
          type: string
          example: 0987654321
        phone:
          type: string
          description: The applicant's phone number for contact purposes.
          example: 01234 567890
        email:
          type: string
          format: email
          description: The applicant's email address for contact purposes.
        registeredStartDate:
          type: string
          description: ISO-8601 format. The date the match was registered.
          format: date
          example: 2022-09-01
        registeredEndDate:
          type: string
          description: ISO-8601 format. The date the match was deregistered.
          format: date
          example: 2023-09-01
        applicationCreatedAt:
          type: string
          description: ISO-8601 format. Optional date and time the application was received, if the application is pending. This may be presented to the ERO user to assist their decisions.
          format: date-time
          example: 2022-08-01 09:35:07
        attestationCount:
          type: integer
          description: The number of Electors this match has attested for another Elector, in the past year.
        franchiseCode:
          type: string
          example: TBD
        postalVote:
          $ref: '#/components/schemas/PostalVote'
        proxyVote:
          $ref: '#/components/schemas/ProxyVote'
      required:
        - emsElectorId

    PostalVote:
      type: object
      properties:
        postalVoteUntilFurtherNotice:
          type: boolean
        postalVoteForSingleDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a postal vote for the election(s) and referendum(s) to be held on the specified date.
          format: date
        postalVoteStartDate:
            type: string
            description: Date in ISO-8601 format. If set, the elector has a postal vote for the period defined by the two dates.
            format: date
        postalVoteEndDate:
            type: string
            description: Date in ISO-8601 format. If set, the elector has a postal vote for the period defined by the two dates.
            format: date
        ballotproperty:
          type: string
        ballotstreet:
          type: string
        ballotlocality:
          type: string
        ballottown:
          type: string
        ballotarea:
          type: string
        ballotpostcode:
          type: string
          example: SW112DR
        ballotuprn:
          type: string
          example: 098766
        ballotAddressReason:
          type: string
          description: |
            Required only if “ballot” address given. The reason the applicant gave for using a different address for the ballot paper (max 500 utf-8 chars)
          maxLength: 500

    ProxyVote:
      type: object
      properties:
        proxyVoteUntilFurtherNotice:
          type: boolean
          description: True if the elector has a proxy vote until further notice.
        proxyVoteForSingleDate:
          type: string
          description: 'Date in ISO8601 format. If set, the elector has a proxy vote for the election(s) and referendum(s) to be held on the specified date.'
          format: date
        proxyVoteStartDate:
          type: string
          description: 'Date in ISO8601 format. If set, the elector has a proxy vote for the period defined by the two dates.'
          format: date
        proxyVoteEndDate:
          type: string
          description: 'Date in ISO8601 format. If set, the elector has a proxy vote for the period defined by the two dates.'
          format: date
        proxyfn:
          type: string
          description: First name of the chosen proxy
        proxymn:
          type: string
          description: Middle name(s) (optional) of the chosen proxy
        proxyln:
          type: string
          description: Last name of the chosen proxy
        proxyfamilyrelationship:
          type: string
          description: (optional) the family relationship (if any) of the chosen proxy. The question to users is “What is your proxy’s relationship to you?”
          maxLength: 500
        proxyproperty:
          type: string
        proxystreet:
          type: string
        proxylocality:
          type: string
        proxytown:
          type: string
        proxyarea:
          type: string
        proxypostcode:
          type: string
          example: SW112DR
        proxyuprn:
          type: string
          example: 098766
        proxyphone:
          type: string
          description: (optional) phone number of the chosen proxy as supplied by the applicant
        proxyemail:
          type: string
          description: (optional) email address of the chosen proxy as supplied by the applicant
          format: email
        proxyreason:
          type: string
          description: |
            A free-form text value containing the applicant’s response to the question “please explain why you are not able to go to your polling station on polling day” for the primary form variant or other text for other form variants (see “Proxy Vote reasons” below) (max 500 utf-8 chars)
          maxLength: 500

  #
  # Response Body Definitions
  # --------------------------------------------------------------------------------
  responses:
    PendingRegisterChecks:
      description: Contains pending Register Checks for the calling ERO's EMS system to process.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PendingRegisterChecksResponse'
  #
  # Request Body Definitions
  # --------------------------------------------------------------------------------
  requestBodies:
    RegisterCheckResultRequest:
      description: The result of a Register Check (performed by an ERO's EMS system), which may contain a positive match or otherwise.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterCheckResult'
